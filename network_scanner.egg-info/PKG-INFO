Metadata-Version: 2.2
Name: network_scanner
Version: 0.1.0
Summary: A modular, stealthy network scanner
Home-page: https://github.com/username/network-scanner
Author: Adrian
Author-email: adrian@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: System :: Networking
Classifier: Topic :: Security
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: scapy>=2.4.5
Requires-Dist: python-nmap>=0.7.1
Requires-Dist: pyyaml>=6.0
Requires-Dist: click>=8.0.0
Requires-Dist: rich>=12.0.0
Requires-Dist: python-dotenv>=0.19.0
Requires-Dist: fastapi>=0.95.0
Requires-Dist: uvicorn>=0.21.0
Requires-Dist: flask>=2.0.0
Requires-Dist: requests>=2.25.0
Requires-Dist: flask-cors>=3.0.10
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Network Scanner

A sophisticated, modular network scanner designed for Linux and macOS that discovers devices, identifies operating systems, detects running services, and scans for vulnerabilities.

## Features

- **Modular Architecture**: Independent components with clean interfaces
- **Plugin System**: Extend functionality through plugins
- **Cross-Platform**: Runs on Linux and macOS
- **Multiple Scanning Modes**: From passive discovery to active vulnerability scanning
- **Stealth Options**: Configure scan timing and patterns to avoid detection
- **CLI Interface**: Powerful command-line interface with debugging capabilities
- **RESTful API**: Backend API for integration with other tools or custom frontends
- **Web UI**: User-friendly web interface for easier interaction

## Installation

### Prerequisites

- Python 3.7+
- pip

### Install from Source

```bash
# Clone the repository
git clone https://github.com/username/network-scanner.git
cd network-scanner

# Install the package
pip install -e .
```

## Usage

### Command-Line Interface

```bash
# Scan the local network
netscanner scan --target 192.168.1.0/24

# Passive mode only
netscanner scan --target 192.168.1.0/24 --passive

# With OS fingerprinting
netscanner scan --target 192.168.1.0/24 --fingerprint
```

### Debug Mode

```bash
# Enable debug output
netscanner --debug scan --target 192.168.1.0/24

# Save debug logs to file
netscanner --debug --log-file=debug.log scan --target 192.168.1.0/24
```

## Nmap Integration

The network scanner includes Nmap integration for enhanced service and vulnerability detection. With this integration, you can scan targets for open ports and perform vulnerability scanning using Nmap scripts.

### Usage

Use the following command to perform an Nmap scan:

    venv/bin/python3 -m network_scanner.ui.cli.main nmap --target <TARGET_IP_OR_HOSTNAME> [--ports <PORTS>] [--vuln]

- --target: Specify the target IP address or hostname.
- --ports: (Optional) Comma-separated list or range of ports to scan (e.g. '80,443,8080-8090').
- --vuln: (Optional) Enable vulnerability scanning using Nmap scripts.

### Example

    venv/bin/python3 -m network_scanner.ui.cli.main nmap --target 192.168.1.254 --ports 22,80,443 --vuln

This will perform a scan on the target, listing open services and checking for known vulnerabilities.

## Backend API

The network scanner provides a RESTful API that can be used to integrate with other tools or to build custom frontends.

### Starting the API Server

```bash
# Start the API server on localhost:8000
netscanner-api

# Specify host and port
netscanner-api --host 0.0.0.0 --port 8080

# Enable debug mode
netscanner-api --debug
```

### API Endpoints

- `GET /` - API information
- `GET /api/health` - Health check
- `POST /api/discover` - Discover devices on the network
- `POST /api/port-scan` - Scan ports on a target
- `POST /api/nmap-scan` - Perform an Nmap scan
- `POST /api/fingerprint` - Perform OS fingerprinting

### Example API Request

```bash
# Discover devices on the network
curl -X POST "http://localhost:8000/api/discover" \
  -H "Content-Type: application/json" \
  -d '{"target": "192.168.1.0/24", "passive": false, "stealth": false, "timeout": 1.0}'
```

## Web Interface

The network scanner includes a web-based user interface for easier interaction with the scanning features.

### Starting the Web Interface

```bash
# Start the web interface on localhost:5000
netscanner-web

# Specify host and port
FLASK_HOST=0.0.0.0 FLASK_PORT=8080 netscanner-web

# Enable debug mode
FLASK_DEBUG=true netscanner-web
```

### Web UI Features

- **Dashboard**: Overview of recent scan results
- **Device Discovery**: Discover devices on your network
- **Port Scanning**: Scan for open ports and services
- **OS Fingerprinting**: Identify operating systems
- **Nmap Scanning**: Perform comprehensive Nmap scans
- **Results Viewer**: View and manage scan results

### Configuration

The web interface can be configured using environment variables:

- `FLASK_HOST`: Host to bind the web server to (default: 127.0.0.1)
- `FLASK_PORT`: Port to bind the web server to (default: 5000)
- `FLASK_DEBUG`: Enable debug mode (default: False)
- `API_BASE_URL`: URL of the backend API server (default: http://localhost:8000)

## Development

### Setup Development Environment

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest
```

## License

MIT License 
